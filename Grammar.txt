Statements <- Sep*, Statement, (Sep+, Statement)*, Sep*

Statement <- Conditional

Conditional <- LowBoolean, {("if" | "unless"), NewLine*, Statement}

LowBoolean <- LowBooleanFactor, (LowBooleanOp, NewLine*, LowBooleanFactor)*

LowBooleanOp <- "and"
	| "or"

LowBooleanUnary <- {"not"}, Expression

Expression <- TernaryIf

TernaryIf <- Boolean, {"?", NewLine*, TernaryIf, NewLine*, ":", NewLine*, TernaryIf}

Boolean <- BooleanFactor, (BooleanOp, NewLine*, BooleanFactor)*

BooleanOp <- "&&"
	| "||"

BooleanUnary <- {"!"}, Arithmetic

Arithmetic <- Term, (TermOp, NewLine*, Term)*

TermOp <- "+"
	| "-"

Term <- Unary, (FactorOp, NewLine*, Unary)*

FactorOp <- "*"
	| "/"
	
Unary <- {("+" | "-"), NewLine*}, LookupChain

LookupChain <- Factor, Lookup(Call)*, {Lookup(Identifier), AssignTail}

Lookup(Type) <- "::", NewLine*, Type
	| ".", NewLine*, Type
	| "[", NewLine*, Expression, NewLine*, "]"

Factor <- Number
	| String
	| Array
	| InterpolatedString
	| Variable
	| Call
	| Assigment
	| If
	| Case
	| Unless
	| Class
	| Module
	| Method
	| Yield
	| "(", Statements, ")"

Array <- "[", {Expression, (",", Expression)*}, "]"

Class <- "class", Identifier, Sep, Statements, "end"

Module <- "module", Identifier, Sep, Statements, "end"

Method <- "def", Identifier, ({MethodParameters}, Sep | "(", MethodParameters, ")"), Statements, "end"

MethodParameters <- MethodParameter, (",", MethodParameter)*

MethodParameter <- {"&" | "*"}, Identifier

Case <- "case", (When+ {Else} | Else), "end"

When <- "when", Expression, ThenSep

If <- "if", Expression, ThenSep, Statements, {"elsif", Statements}*, {Else}, "end"

Else <- "else", Statements

Unless <- "unless", Expression, ThenSep, Statements, "end"

Assigment <- Variable, AssignTail

AssignTail <- AssignOp, NewLine*, Expression

AssignOp <- "="
	| "+="
	| "-="
	| "*="
	| "/="

Call <- Identifier, {Arguments | "(", Arguments, ")"}, {Block}

Yield  <- {Arguments | "(", Arguments, ")"}

Block <- "{", {BlockParameters}, Statements, "}"
	| "do", {BlockParameters}, Statements, "end"

BlockParameters <- "|", MethodParameters, "|"

Arguments <- Expression, (",", Expression)*

Variable <- Identifier

ThenSep <- "then"
	| Sep
	| ":"

Sep <- NewLine+
	| ";"

InterpolatedString = StringStart, Statements, (StringContinue, Statements)* StringEnd

# Tokens from lexer

Identifier
Number
NewLine
String
StringStart
StringContinue
StringEnd